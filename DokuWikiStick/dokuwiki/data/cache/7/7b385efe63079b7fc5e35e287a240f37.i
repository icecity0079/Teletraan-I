a:147:{i:0;a:3:{i:0;s:14:"document_start";i:1;a:0:{}i:2;i:0;}i:1;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:9:"uml类图";i:1;i:1;i:2;i:1;}i:2;i:1;}i:2;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:1;}i:2;i:1;}i:3;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:27;}i:4;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:33:"一、类的属性的表示方式";i:1;i:2;i:2;i:27;}i:2;i:27;}i:5;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:2;}i:2;i:27;}i:6;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:27;}i:7;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:220:"在UML类图中，类使用包含类名、属性(field) 和方法(method) 且带有分割线的矩形来表示，比如下图表示一个Employee类，它包含name,age和email这3个属性，以及modifyInfo()方法。
";}i:2;i:73;}i:8;a:3:{i:0;s:13:"internalmedia";i:1;a:7:{i:0;s:47:":wiki:617148-20160612221055090-339746853_1_.jpg";i:1;s:0:"";i:2;s:6:"center";i:3;N;i:4;N;i:5;s:5:"cache";i:6;s:6:"direct";}i:2;i:293;}i:9;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:170:"
那么属性/方法名称前加的加号和减号是什么意思呢？它们表示了这个属性或方法的可见性，UML类图中表示可见性的符号有三种：";}i:2;i:354;}i:10;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:524;}i:11;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:524;}i:12;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:20:"· + ：表示public";}i:2;i:526;}i:13;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:546;}i:14;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:546;}i:15;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:21:"· - ：表示private";}i:2;i:548;}i:16;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:569;}i:17;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:569;}i:18;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:51:"· #：表示protected（friendly也归入这类）";}i:2;i:571;}i:19;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:622;}i:20;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:622;}i:21;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:78:"因此，上图中的Employee类具有3个私有属性和一个公有方法。";}i:2;i:625;}i:22;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:703;}i:23;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:703;}i:24;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:55:"实际上，属性的完整表示方式是这样的：
";}i:2;i:705;}i:25;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:22:"markdowku_boldasterisk";i:1;a:2:{i:0;i:1;i:1;s:2:"**";}i:2;i:1;i:3;s:2:"**";}i:2;i:760;}i:26;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:22:"markdowku_boldasterisk";i:1;a:2:{i:0;i:3;i:1;s:42:"可见性  名称 ：类型 [ = 缺省值]";}i:2;i:3;i:3;s:42:"可见性  名称 ：类型 [ = 缺省值]";}i:2;i:762;}i:27;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:22:"markdowku_boldasterisk";i:1;a:2:{i:0;i:4;i:1;s:2:"**";}i:2;i:4;i:3;s:2:"**";}i:2;i:804;}i:28;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:40:"
中括号中的内容表示是可选的";}i:2;i:806;}i:29;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:846;}i:30;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:848;}i:31;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:33:"二、类的方法的表示方式";i:1;i:2;i:2;i:848;}i:2;i:848;}i:32;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:2;}i:2;i:848;}i:33;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:848;}i:34;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:103:"上图中我们已经看到了方法的表示形式。实际上，方法的完整表示方式如下：
";}i:2;i:894;}i:35;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:22:"markdowku_boldasterisk";i:1;a:2:{i:0;i:1;i:1;s:2:"**";}i:2;i:1;i:3;s:2:"**";}i:2;i:997;}i:36;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:22:"markdowku_boldasterisk";i:1;a:2:{i:0;i:3;i:1;s:51:"可见性  名称(参数列表) [ ： 返回类型]";}i:2;i:3;i:3;s:51:"可见性  名称(参数列表) [ ： 返回类型]";}i:2;i:999;}i:37;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:22:"markdowku_boldasterisk";i:1;a:2:{i:0;i:4;i:1;s:2:"**";}i:2;i:4;i:3;s:2:"**";}i:2;i:1050;}i:38;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:46:"
同样，中括号中的内容是可选的。";}i:2;i:1052;}i:39;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:1098;}i:40;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:1098;}i:41;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:54:"比如在下图的Demo类中，定义了3个方法：
";}i:2;i:1100;}i:42;a:3:{i:0;s:13:"internalmedia";i:1;a:7:{i:0;s:48:":wiki:617148-20160612222105058-2140837213_1_.jpg";i:1;s:0:"";i:2;s:6:"center";i:3;N;i:4;N;i:5;s:5:"cache";i:6;s:6:"direct";}i:2;i:1154;}i:43;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:84:"
· public方法method1接收一个类型为Object的参数，返回值类型为void";}i:2;i:1216;}i:44;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:1300;}i:45;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:1300;}i:46;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:61:"· protected方法method2无参数，返回值类型为String";}i:2;i:1302;}i:47;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:1363;}i:48;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:1363;}i:49;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:88:"· private方法method3接收类型分别为int、int[]的参数，返回值类型为int";}i:2;i:1365;}i:50;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:1453;}i:51;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:1453;}i:52;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:42:"三、类与类之间关系的表示方式";}i:2;i:1456;}i:53;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:1498;}i:54;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:1498;}i:55;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:16:"1、关联关系";}i:2;i:1500;}i:56;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:1516;}i:57;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:1516;}i:58;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:75:"关联关系又可进一步分为单向关联、双向关联和自关联。";}i:2;i:1518;}i:59;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:1593;}i:60;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:1593;}i:61;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:19:"（1）单向关联";}i:2;i:1595;}i:62;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:1614;}i:63;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:1614;}i:64;a:3:{i:0;s:13:"internalmedia";i:1;a:7:{i:0;s:48:":wiki:617148-20160612224805636-1840590061_1_.jpg";i:1;s:0:"";i:2;s:6:"center";i:3;N;i:4;N;i:5;s:5:"cache";i:6;s:6:"direct";}i:2;i:1616;}i:65;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:1678;}i:66;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:1678;}i:67;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:207:"我们可以看到，在UML类图中单向关联用一个带箭头的直线表示。上图表示每个顾客都有一个地址，这通过让Customer类持有一个类型为Address的成员变量类实现。";}i:2;i:1680;}i:68;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:1887;}i:69;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:1887;}i:70;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:19:"（2）双向关联";}i:2;i:1889;}i:71;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:1908;}i:72;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:1908;}i:73;a:3:{i:0;s:13:"internalmedia";i:1;a:7:{i:0;s:64:":产品知识:uml知识:617148-20160612225006840-13774319_1_.jpg";i:1;s:0:"";i:2;s:6:"center";i:3;N;i:4;N;i:5;s:5:"cache";i:6;s:6:"direct";}i:2;i:1910;}i:74;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:1988;}i:75;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:1988;}i:76;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:380:"从上图中我们很容易看出，所谓的双向关联就是双方各自持有对方类型的成员变量。在UML类图中，双向关联用一个不带箭头的直线表示。上图中在Customer类中维护一个Product[]数组，表示一个顾客购买了那些产品；在Product类中维护一个Customer类型的成员变量表示这个产品被哪个顾客所购买。";}i:2;i:1990;}i:77;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:2370;}i:78;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:2370;}i:79;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:17:"（3）自关联
";}i:2;i:2372;}i:80;a:3:{i:0;s:13:"internalmedia";i:1;a:7:{i:0;s:64:":产品知识:uml知识:617148-20160612225239636-76459111_1_.jpg";i:1;s:0:"";i:2;s:6:"center";i:3;N;i:4;N;i:5;s:5:"cache";i:6;s:6:"direct";}i:2;i:2389;}i:81;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:2467;}i:82;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:2467;}i:83;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:179:"自关联在UML类图中用一个带有箭头且指向自身的直线表示。上图的意思就是Node类包含类型为Node的成员变量，也就是“自己包含自己”。";}i:2;i:2469;}i:84;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:2648;}i:85;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:2648;}i:86;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:16:"2、聚合关系";}i:2;i:2650;}i:87;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:2666;}i:88;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:2666;}i:89;a:3:{i:0;s:13:"internalmedia";i:1;a:7:{i:0;s:65:":产品知识:uml知识:617148-20160612225421496-664373564_1_.jpg";i:1;s:0:"";i:2;s:6:"center";i:3;N;i:4;N;i:5;s:5:"cache";i:6;s:6:"direct";}i:2;i:2668;}i:90;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:403:"
上图中的Car类与Engine类就是聚合关系（Car类中包含一个Engine类型的成员变量）。由上图我们可以看到，UML中聚合关系用带空心菱形和箭头的直线表示。聚合关系强调是“整体”包含“部分”，但是“部分”可以脱离“整体”而单独存在。比如上图中汽车包含了发动机，而发动机脱离了汽车也能单独存在。";}i:2;i:2747;}i:91;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:3150;}i:92;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:3150;}i:93;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:16:"3、组合关系";}i:2;i:3155;}i:94;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:3171;}i:95;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:3171;}i:96;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:129:"组合关系与聚合关系见得最大不同在于：这里的“部分”脱离了“整体”便不复存在。比如下图：";}i:2;i:3173;}i:97;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:3302;}i:98;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:3302;}i:99;a:3:{i:0;s:13:"internalmedia";i:1;a:7:{i:0;s:65:":产品知识:uml知识:617148-20160612232819824-829657559_1_.jpg";i:1;s:0:"";i:2;s:6:"center";i:3;N;i:4;N;i:5;s:5:"cache";i:6;s:6:"direct";}i:2;i:3304;}i:100;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:3383;}i:101;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:3383;}i:102;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:150:"显然，嘴是头的一部分且不能脱离了头而单独存在。在UML类图中，组合关系用一个带实心菱形和箭头的直线表示。";}i:2;i:3385;}i:103;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:3535;}i:104;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:3535;}i:105;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:16:"4、依赖关系";}i:2;i:3540;}i:106;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:3556;}i:107;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:3556;}i:108;a:3:{i:0;s:13:"internalmedia";i:1;a:7:{i:0;s:63:":产品知识:uml知识:617148-20160612232951746-9292157_1_.jpg";i:1;s:0:"";i:2;s:6:"center";i:3;N;i:4;N;i:5;s:5:"cache";i:6;s:6:"direct";}i:2;i:3558;}i:109;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:3635;}i:110;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:3635;}i:111;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:212:"从上图我们可以看到，Driver的drive方法只有传入了一个Car对象才能发挥作用，因此我们说Driver类依赖于Car类。在UML类图中，依赖关系用一条带有箭头的虚线表示。";}i:2;i:3637;}i:112;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:3849;}i:113;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:3849;}i:114;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:16:"5、继承关系";}i:2;i:3854;}i:115;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:3870;}i:116;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:3870;}i:117;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:161:"继承关系对应的是extend关键字，在UML类图中用带空心三角形的直线表示，如下图所示中，Student类与Teacher类继承了Person类。";}i:2;i:3872;}i:118;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:4033;}i:119;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:4033;}i:120;a:3:{i:0;s:13:"internalmedia";i:1;a:7:{i:0;s:66:":产品知识:uml知识:617148-20160612233246199-1404301867_1_.jpg";i:1;s:0:"";i:2;s:6:"center";i:3;N;i:4;N;i:5;s:5:"cache";i:6;s:6:"direct";}i:2;i:4035;}i:121;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:4115;}i:122;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:4115;}i:123;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:22:"6、接口实现关系";}i:2;i:4118;}i:124;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:4140;}i:125;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:4140;}i:126;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:152:"这种关系对应implement关键字，在UML类图中用带空心三角形的虚线表示。如下图中，Car类与Ship类都实现了Vehicle接口。";}i:2;i:4142;}i:127;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:4294;}i:128;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:4294;}i:129;a:3:{i:0;s:13:"internalmedia";i:1;a:7:{i:0;s:65:":产品知识:uml知识:617148-20160612233430777-736506858_1_.jpg";i:1;s:0:"";i:2;s:6:"center";i:3;N;i:4;N;i:5;s:5:"cache";i:6;s:6:"direct";}i:2;i:4296;}i:130;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:4375;}i:131;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:4375;}i:132;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:162:"到了这里，UML类图中最常见的表示方式我们就介绍完了，有了这些我们就能读懂常见的UML类图了，剩下的遇到时再查即可。";}i:2;i:4378;}i:133;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:4540;}i:134;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:4540;}i:135;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:18:"三、参考资料";}i:2;i:4542;}i:136;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:4560;}i:137;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:4560;}i:138;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:43:"http://www.uml.org.cn/oobject/201211231.asp";i:1;N;}i:2;i:4562;}i:139;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:4605;}i:140;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:4605;}i:141;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:15:"本贴原文：";}i:2;i:4607;}i:142;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:108:"http://mp.weixin.qq.com/s?__biz=MzIzMjE1Njg4Mw==&mid=2650117683&idx=1&sn=85e9946c81a5c283a691acfca174d52a#rd";i:1;N;}i:2;i:4622;}i:143;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:0:"";}i:2;i:4730;}i:144;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:4730;}i:145;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:4730;}i:146;a:3:{i:0;s:12:"document_end";i:1;a:0:{}i:2;i:4730;}}